name: CI/CD

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  control-plane:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: control-plane
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
    steps:
    # Setup
    - name: Check out git repo
      uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install poetry
      run: curl -sSL https://install.python-poetry.org | python -
    - name: Install dependencies
      run: poetry install

    # Lint & test
    - name: Run mypy
      run: poetry run mypy .
    - name: Run black
      run: poetry run black --check .
    - name: Run isort
      run: poetry run isort --check-only .
    - name: Run unit tests
      run: poetry run pytest

    # Generate & upload API schema
    - name: Generate API schema
      run: mkdir ../api-schemas && poetry run generate-schema --schema-output ../api-schemas/control-plane.json --error-types-output ../api-schemas/control-plane-errors.json
    - name: Upload API schema
      uses: actions/upload-artifact@v3
      with:
        name: control-plane-schemas
        path: api-schemas/

    # Build & upload docker image
    - name: Build wheel
      run: poetry build --format wheel
    - name: Build Docker image
      run: docker build -t control-plane:latest .
    - name: Install AWS CLI
      if: github.ref == 'refs/heads/master'
      run: |
        pip install --upgrade pip
        pip install awscli
    - name: Upload image to ECR
      if: github.ref == 'refs/heads/master'
      run: |
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        docker tag control-plane:latest $ECR_REGISTRY/$ECR_REPOSITORY:$(echo $GITHUB_SHA | cut -c1-8)
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$(echo $GITHUB_SHA | cut -c1-8)
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
    - name: Upload image to Dockerhub
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
        docker tag control-plane:latest $DOCKERHUB_REGISTRY/$DOCKERHUB_REPOSITORY:${{ github.ref_name }}
        docker push $DOCKERHUB_REGISTRY/$DOCKERHUB_REPOSITORY:${{ github.ref_name }}
      env:
        DOCKERHUB_REGISTRY: ${{ secrets.DOCKERHUB_REGISTRY }}
        DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  python-client:
    needs: control-plane
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-client
    steps:
      - name: Check out git repo
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python -
      - name: Install dependencies
        run: poetry install
      - name: Download API schema
        uses: actions/download-artifact@v3
        with:
          name: control-plane-schemas
          path: api-schemas/
      - name: Generate API client
        run: bash scripts/generate_client.sh

      - name: Run linters
        run: bash scripts/lint.sh
      - name: Build wheel
        run: poetry build --format wheel
      - name: Upload wheel to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [ ! -f dist/multinode-${{ github.ref_name }}-py3-none-any.whl ]; then
              echo "Error: git tag is incompatible with wheel version number."
              exit 1
          fi
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
