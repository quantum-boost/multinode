from typing import Optional

from control_plane.data.data_store import DataStore
from control_plane.provisioning.provisioner import AbstractProvisioner
from control_plane.types.datatypes import ExecutionLogs
from control_plane.control.utils.version_reference import VersionReference, resolve_version_reference


class LogsApiHandler:
    """
    API method for getting logs generated by an execution.
    """

    def __init__(self, data_store: DataStore, provisioner: AbstractProvisioner) -> None:
        self._data_store = data_store
        self._provisioner = provisioner

    def get_execution_logs(
        self,
        project_name: str,
        version_ref: VersionReference,
        function_name: str,
        invocation_id: str,
        execution_id: str,
        max_lines: int = 50,
        initial_offset: Optional[str] = None,
    ) -> ExecutionLogs:
        """
        :raises ProjectDoesNotExist:
        :raises VersionDoesNotExist:
        :raises FunctionDoesNotExist:
        :raises InvocationDoesNotExist:
        :raises ExecutionDoesNotExist:
        """
        version_id = resolve_version_reference(project_name, version_ref, self._data_store)

        execution = self._data_store.executions.get(
            project_name=project_name,
            version_id=version_id,
            function_name=function_name,
            invocation_id=invocation_id,
            execution_id=execution_id,
        )

        if execution.worker_details is not None:
            logs_result = self._provisioner.get_worker_logs(
                worker_details=execution.worker_details, max_lines=max_lines, initial_offset=initial_offset
            )

            return ExecutionLogs(
                project_name=project_name,
                version_id=version_id,
                function_name=function_name,
                invocation_id=invocation_id,
                execution_id=execution_id,
                log_lines=logs_result.log_lines,
                next_offset=logs_result.next_offset,
            )
        else:
            return ExecutionLogs(
                project_name=project_name,
                version_id=version_id,
                function_name=function_name,
                invocation_id=invocation_id,
                execution_id=execution_id,
                log_lines=[],
                next_offset=None,
            )
